# Copyright (c) 2017 The Khronos Group Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


version 1.0;

graph AlexNet( input ) -> ( output )
{
    input = external(shape = [1,3,224,224]);
    conv1 = conv_layer(input, channels = 96, size = [11,11], padding = [(0,0), (0,0)], stride = [4,4], scope = 'conv1');
    relu1 = relu(conv1);
    norm1 = local_response_normalization(relu1, size = [1,5,1,1], alpha = 0.0001, beta = 0.75, bias = 1.0);
    pool1 = max_pool_layer(norm1, size = [3,3], stride = [2,2], padding = [(0,1), (0,1)]);
    conv2 = conv_layer(pool1, channels = 256, size = [5,5], groups = 2, scope = 'conv2');
    relu2 = relu(conv2);
    norm2 = local_response_normalization(relu2, size = [1,5,1,1], alpha = 0.0001, beta = 0.75, bias = 1.0);
    pool2 = max_pool_layer(norm2, size = [3,3], stride = [2,2], padding = [(0,0), (0,0)]);
    conv3 = conv_layer(pool2, channels = 384, size = [3,3], scope = 'conv3');
    relu3 = relu(conv3);
    conv4 = conv_layer(relu3, channels = 384, size = [3,3], groups = 2, scope = 'conv4');
    relu4 = relu(conv4);
    conv5 = conv_layer(relu4, channels = 256, size = [3,3], groups = 2, scope = 'conv5');
    relu5 = relu(conv5);
    pool5 = max_pool_layer(relu5, size = [3,3], stride = [2,2], padding = [(0,0), (0,0)]);
    conv6 = conv_layer(pool5, channels = 4096, size = [6,6], padding = [(0,0), (0,0)], scope = 'conv6');
    relu6 = relu(conv6);
    conv7 = conv_layer(relu6, channels = 4096, size = [1,1], scope = 'conv7');
    relu7 = relu(conv7);
    conv8 = conv_layer(relu7, channels = 1000, size = [1,1], scope = 'conv8');
    output = softmax(conv8);
}
