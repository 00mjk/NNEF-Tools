# Copyright (c) 2017 The Khronos Group Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


version 1.0

fragment conv3x3( input: tensor, channels: extent, scope: string ) -> ( output: tensor )
{
    output = conv_layer(input, channels = channels, size = [3,3], scope = scope)
}

fragment pool2x2( input: tensor ) -> ( output: tensor )
{
    output = max_pool_layer(input, size = [2,2], stride = [2,2])
}

graph VGG19( input ) -> ( output )
{
    input  = external(shape = [1,3,224,224])
    conv1  = relu(conv3x3(input, channels = 64, scope = 'conv1'))
    conv2  = relu(conv3x3(conv1, channels = 64, scope = 'conv2'))
    pool1  = pool2x2(conv2)
    conv3  = relu(conv3x3(pool1, channels = 128, scope = 'conv3'))
    conv4  = relu(conv3x3(conv3, channels = 128, scope = 'conv4'))
    pool2  = pool2x2(conv4)
    conv5  = relu(conv3x3(pool2, channels = 256, scope = 'conv5'))
    conv6  = relu(conv3x3(conv5, channels = 256, scope = 'conv6'))
    conv7  = relu(conv3x3(conv6, channels = 256, scope = 'conv7'))
    conv8  = relu(conv3x3(conv7, channels = 256, scope = 'conv8'))
    pool3  = pool2x2(conv8)
    conv9  = relu(conv3x3(pool3, channels = 512, scope = 'conv9'))
    conv10 = relu(conv3x3(conv9, channels = 512, scope = 'conv10'))
    conv11 = relu(conv3x3(conv10, channels = 512, scope = 'conv11'))
    conv12 = relu(conv3x3(conv11, channels = 512, scope = 'conv12'))
    pool4  = pool2x2(conv12)
    conv13 = relu(conv3x3(pool4, channels = 512, scope = 'conv13'))
    conv14 = relu(conv3x3(conv13, channels = 512, scope = 'conv14'))
    conv15 = relu(conv3x3(conv14, channels = 512, scope = 'conv15'))
    conv16 = relu(conv3x3(conv15, channels = 512, scope = 'conv16'))
    pool5  = pool2x2(conv16)

    conv17 = relu(conv_layer(pool5, channels = 4096, size = [7,7], scope = 'conv17'))
    conv18 = relu(conv_layer(conv17, channels = 4096, size = [1,1], scope = 'conv18'))
    conv19 = conv_layer(conv18, channels = 1000, size = [1,1], scope = 'conv19')

    output = softmax(conv19)
}
